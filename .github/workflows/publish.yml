name: Publish

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11']
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: x64

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --sdist

      - name: Install built wheel - x86_64
        run: |
          pip install refx_pp_py --no-index --find-links dist --force-reinstall
          python -c "import refx_pp_py"

      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          args: --release --universal2 --out dist

      - name: Install built wheel - universal2
        run: |
          pip install refx_pp_py --no-index --find-links dist --force-reinstall
          python -c "import refx_pp_py"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x64, x86]
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}
          architecture: ${{ matrix.target }}

      - name: Rust setup
        uses: dtolnay/rust-toolchain@stable

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist

      - name: Install built wheel
        run: |
          pip install refx_pp_py --no-index --find-links dist --force-reinstall
          python -c "import refx_pp_py"

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x86_64, i686, aarch64]
    steps:
    - name: Checkout project
      uses: actions/checkout@v4

    - name: Python setup
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python_version }}
        architecture: x64

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: --release --out dist -i ${{ matrix.python_version }}

    - name: Install built wheel
      if: matrix.target == 'x86_64'
      run: |
        pip install refx_pp_py --no-index --find-links dist --force-reinstall
        python -c "import refx_pp_py"

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python_version: ['3.7', '3.8', '3.9', '3.10', '3.11']
    needs: [ macos, windows, linux ]
    steps:
      - name: Get artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels

      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python_version }}

      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
